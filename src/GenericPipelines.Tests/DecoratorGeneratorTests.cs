using GenericPipelines.Generators;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;

namespace GenericPipelines.Tests;

public class DecoratorGeneratorTests
{
    [Fact]
    public async Task GenerationTest()
    {
        // Arrange
        string source = """
#nullable enable

using System;
using System.Threading;
using System.Threading.Tasks;

using GenericPipelines;
using GenericPipelines.Middlewares;

namespace FooHandlers.Handlers
{
    public interface IFooHandler : IRequestHandler<bool, string>;

    [PipelineDecoratedAttribute<Pipeline<bool, string>>]
    internal sealed partial class FooHandler : IFooHandler
    {
        public Task<string> HandleAsync(bool request, CancellationToken ct = default)
        {
            return Task.FromResult( request.ToString() );
        }
    }
}
""";

        string expectedGeneratedCode = """
// <auto-generated/>

#pragma warning disable
#nullable enable

using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;

namespace GenericPipelines.Generated.Decorators
{
    [global::System.CodeDom.Compiler.GeneratedCode("GenericPipelines.Generators.DecoratorGenerator", "1.0.0.0")]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal sealed class FooHandlers_Handlers_FooHandler_Decorator
        : FooHandlers.Handlers.IFooHandler
    {
        private readonly IRequestHandler<bool, string> _requestHandler;
        
        public FooHandlers_Handlers_FooHandler_Decorator(
            GenericPipelines.Middlewares.Pipeline<bool, string> pipeline,
            FooHandlers.Handlers.FooHandler requestHandler)
        {
            _requestHandler = pipeline.DecorateHandler(requestHandler);
        }
        
        public Task<string> HandleAsync(bool request, CancellationToken ct = default)
        {
            return _requestHandler.HandleAsync(request, ct);
        }
        
        public static void RegisterDecoratedHandler(IServiceCollection services)
        {
            services
                .AddTransient<FooHandlers.Handlers.FooHandler>()
                .AddTransient<FooHandlers.Handlers.IFooHandler, FooHandlers_Handlers_FooHandler_Decorator>();
        }
    }
}

""";

        string expectedGeneratedCode2 = """
// <auto-generated/>

#pragma warning disable
#nullable enable

using Microsoft.Extensions.DependencyInjection;

namespace GenericPipelines.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("GenericPipelines.Generators.DecoratorGenerator", "1.0.0.0")]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal static class RegistrationExtensions
    {
        public static IServiceCollection RegisterDecoratedRequestHandlers(this IServiceCollection services)
        {
            Decorators.FooHandlers_Handlers_FooHandler_Decorator.RegisterDecoratedHandler(services);
            return services;
        }
    }
}

""";

        CSharpSourceGeneratorTest<DecoratorGenerator, DefaultVerifier> test = new()
        {
            ReferenceAssemblies = ReferenceAssemblies.Net.Net90
                .AddPackages([
                    new PackageIdentity("Microsoft.Extensions.DependencyInjection.Abstractions", "9.0.8")
                ]),
            TestState =
            {
                Sources = { CodeBase.CommonCode, source },
                GeneratedSources =
                {
                    (typeof(DecoratorGenerator), "FooHandlerDecorator.g.cs", expectedGeneratedCode),
                    (typeof(DecoratorGenerator), "GenericPipelinesExtensions.g.cs", expectedGeneratedCode2)
                }
            }
        };

        await test.RunAsync();
    }

    [Fact]
    public async Task EventTest()
    {
        // Arrange
        string source = """
#nullable enable

using System;
using System.Threading;
using System.Threading.Tasks;

using GenericPipelines;
using GenericPipelines.Middlewares;

namespace FooHandlers.Handlers
{
    public interface IFooHandler : IRequestHandler<bool>;

    [PipelineDecoratedAttribute<Pipeline<bool>>]
    internal sealed partial class FooHandler : IFooHandler
    {
        public Task HandleAsync(bool request, CancellationToken ct = default)
        {
            return Task.CompletedTask;
        }
    }
}
""";

        string expectedGeneratedCode = """
// <auto-generated/>

#pragma warning disable
#nullable enable

using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;

namespace GenericPipelines.Generated.Decorators
{
    [global::System.CodeDom.Compiler.GeneratedCode("GenericPipelines.Generators.DecoratorGenerator", "1.0.0.0")]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal sealed class FooHandlers_Handlers_FooHandler_Decorator
        : FooHandlers.Handlers.IFooHandler
    {
        private readonly IRequestHandler<bool> _requestHandler;
        
        public FooHandlers_Handlers_FooHandler_Decorator(
            GenericPipelines.Middlewares.Pipeline<bool> pipeline,
            FooHandlers.Handlers.FooHandler requestHandler)
        {
            _requestHandler = pipeline.DecorateHandler(requestHandler);
        }
        
        public Task HandleAsync(bool request, CancellationToken ct = default)
        {
            return _requestHandler.HandleAsync(request, ct);
        }
        
        public static void RegisterDecoratedHandler(IServiceCollection services)
        {
            services
                .AddTransient<FooHandlers.Handlers.FooHandler>()
                .AddTransient<FooHandlers.Handlers.IFooHandler, FooHandlers_Handlers_FooHandler_Decorator>();
        }
    }
}

""";

        string expectedGeneratedCode2 = """
// <auto-generated/>

#pragma warning disable
#nullable enable

using Microsoft.Extensions.DependencyInjection;

namespace GenericPipelines.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("GenericPipelines.Generators.DecoratorGenerator", "1.0.0.0")]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal static class RegistrationExtensions
    {
        public static IServiceCollection RegisterDecoratedRequestHandlers(this IServiceCollection services)
        {
            Decorators.FooHandlers_Handlers_FooHandler_Decorator.RegisterDecoratedHandler(services);
            return services;
        }
    }
}

""";

        CSharpSourceGeneratorTest<DecoratorGenerator, DefaultVerifier> test = new()
        {
            ReferenceAssemblies = ReferenceAssemblies.Net.Net90
                .AddPackages([
                    new PackageIdentity("Microsoft.Extensions.DependencyInjection.Abstractions", "9.0.8")
                ]),
            TestState =
            {
                Sources = { CodeBase.CommonCode, source },
                GeneratedSources =
                {
                    (typeof(DecoratorGenerator), "FooHandlerDecorator.g.cs", expectedGeneratedCode),
                    (typeof(DecoratorGenerator), "GenericPipelinesExtensions.g.cs", expectedGeneratedCode2)
                }
            }
        };

        await test.RunAsync();
    }
}